# coding: utf-8
from __future__ import unicode_literals

from datetime import date
import unittest
from xml.dom.minidom import parseString

from mock import Mock, patch

from xero import Xero


class ManagerTest(unittest.TestCase):
    
    def test_serialization(self):
        "An invoice can be correctly serialized for a POST/PUT request"
        # This test currently fails, because we got rid of the walk_dom
        # and convert_to_dict methods.

        # This checks:
        # * Date data types
        # * Normal string data types
        # * Inline dictionary data types (Contact)
        # * List of dict data types

        credentials = Mock()
        xero = Xero(credentials)

        original = {
            'Type': 'ACCREC',
            'Contact': {'ContactID': '3e776c4b-ea9e-4bb1-96be-6b0c7a71a37f'},
            'LineItems': [
                {
                    'Description': 'Line item 1',
                    'Quantity': '1.0',
                    'UnitAmount': '100.00',
                    'AccountCode': '200',
                },
                {
                    'Description': 'Line item 2',
                    'Quantity': '2.0',
                    'UnitAmount': '750.00',
                    'AccountCode': '200',
                },
            ],
            'Date': date(2013, 2, 1),
            'DueDate': date(2013, 2, 15),
            'InvoiceNumber': 'X0001'
        }
        # Convert invoice to XML
        xml = xero.invoices._prepare_data_for_save(original)
        
        # Original should match reproduced version, embedded inside a parent key
        self.assertEqual("<Invoices><Invoice><InvoiceNumber>X0001</InvoiceNumber><Contact><ContactID>3e776c4b-ea9e-4bb1-96be-6b0c7a71a37f</ContactID></Contact><Date>2013-02-01</Date><LineItems><LineItem><AccountCode>200</AccountCode><UnitAmount>100.00</UnitAmount><Description>Line item 1</Description><Quantity>1.0</Quantity></LineItem><LineItem><AccountCode>200</AccountCode><UnitAmount>750.00</UnitAmount><Description>Line item 2</Description><Quantity>2.0</Quantity></LineItem></LineItems><Type>ACCREC</Type><DueDate>2013-02-15</DueDate></Invoice></Invoices>", xml)

    @patch('requests.get')
    def test_unicode_content(self, r_get):
        "Unicode data can be handled in responses."
        # Verified response from Xero API.
        # This reponse was generated by setting the contact on
        # "Yarra Transport" (ID dbb54b2b-8fdb-4277-ad03-2df50ce760fa)
        # to "John Sürname"
        
        # This fails because we now ask for (and only parse) JSON.
        r_get.return_value = Mock(status_code=200, 
            headers={'content-type': 'application/json; charset=utf-8'},
            encoding='utf-8',
            text="""{
  "Id": "7dcf9f56-ce86-445b-b884-2984fcf4c3f7",
  "Status": "OK",
  "ProviderName": "FooBarIncorporated",
  "DateTimeUTC": "\/Date(1380789260633)\/",
  "Contacts": [
    {
      "ContactID": "755f1475-d255-43a8-bedc-5ea7fd26c71f",
      "ContactStatus": "ACTIVE",
      "Name": "Yarra Transport",
      "FirstName": "John",
      "LastName": "Sürname",
      "EmailAddress": "",
      "BankAccountDetails": "",
      "Addresses": [
        {
          "AddressType": "STREET",
          "City": "",
          "Region": "",
          "PostalCode": "",
          "Country": "",
          "AttentionTo": ""
        },
        {
          "AddressType": "POBOX",
          "City": "",
          "Region": "",
          "PostalCode": "",
          "Country": "",
          "AttentionTo": ""
        }
      ],
      "Phones": [
        {
          "PhoneType": "DDI",
          "PhoneNumber": "",
          "PhoneAreaCode": "",
          "PhoneCountryCode": ""
        },
        {
          "PhoneType": "DEFAULT",
          "PhoneNumber": "",
          "PhoneAreaCode": "",
          "PhoneCountryCode": ""
        },
        {
          "PhoneType": "FAX",
          "PhoneNumber": "",
          "PhoneAreaCode": "",
          "PhoneCountryCode": ""
        },
        {
          "PhoneType": "MOBILE",
          "PhoneNumber": "",
          "PhoneAreaCode": "",
          "PhoneCountryCode": ""
        }
      ],
      "UpdatedDateUTC": "\/Date(1380742397027+1300)\/",
      "ContactGroups": [],
      "IsSupplier": false,
      "IsCustomer": false
    }
  ]
}""")

        credentials = Mock()
        xero = Xero(credentials)

        contact = xero.contacts.get(id='755f1475-d255-43a8-bedc-5ea7fd26c71f')

        self.assertEqual(contact['FirstName'], 'John')
        self.assertEqual(contact['LastName'], 'Sürname')
