# coding: utf-8
from __future__ import unicode_literals

from datetime import date
import unittest
from xml.dom.minidom import parseString

from mock import Mock, patch

from xero import Xero


class ManagerTest(unittest.TestCase):
    @unittest.expectedFailure
    def test_serialization(self):
        "An invoice can be correctly serialized for a POST/PUT request"
        # This test currently fails, because we got rid of the walk_dom
        # and convert_to_dict methods.

        # This checks:
        # * Date data types
        # * Normal string data types
        # * Inline dictionary data types (Contact)
        # * List of dict data types

        credentials = Mock()
        xero = Xero(credentials)

        original = {
            'Type': 'ACCREC',
            'Contact': {'ContactID': '3e776c4b-ea9e-4bb1-96be-6b0c7a71a37f'},
            'LineItems': [
                {
                    'Description': 'Line item 1',
                    'Quantity': '1.0',
                    'UnitAmount': '100.00',
                    'AccountCode': '200',
                },
                {
                    'Description': 'Line item 2',
                    'Quantity': '2.0',
                    'UnitAmount': '750.00',
                    'AccountCode': '200',
                },
            ],
            'Date': date(2013, 2, 1),
            'DueDate': date(2013, 2, 15),
            'InvoiceNumber': 'X0001'
        }
        # Convert invoice to XML
        xml = xero.invoices._prepare_data_for_save(original)

        # Convert back into a dictionary.
        dom = parseString(xml)
        tuple_form = xero.invoices.walk_dom(dom)
        reproduced = xero.invoices.convert_to_dict(tuple_form)

        # Original should match reproduced version, embedded inside a parent key
        self.assertEqual([original], reproduced['Invoices'])

    @patch('requests.get')
    @unittest.expectedFailure
    def test_unicode_content(self, r_get):
        "Unicode data can be handled in responses."
        # Verified response from Xero API.
        # This reponse was generated by setting the contact on
        # "Yarra Transport" (ID dbb54b2b-8fdb-4277-ad03-2df50ce760fa)
        # to "John Sürname"
        
        # This fails because we now ask for (and only parse) JSON.
        r_get.return_value = Mock(status_code=200, headers={'content-type': 'text/xml; charset=utf-8'}, encoding='utf-8', text="""<Response xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Id>dbb54b2b-8fdb-4277-ad03-2df50ce760fa</Id>
  <Status>OK</Status>
  <ProviderName>TradesCloud</ProviderName>
  <DateTimeUTC>2013-05-31T06:07:35.3732465Z</DateTimeUTC>
  <Contacts>
    <Contact>
      <ContactID>755f1475-d255-43a8-bedc-5ea7fd26c71f</ContactID>
      <ContactStatus>ACTIVE</ContactStatus>
      <Name>Yarra Transport</Name>
      <FirstName>John</FirstName>
      <LastName>S\xfcrname</LastName>
      <EmailAddress>rayong@yarratransport.co</EmailAddress>
      <Addresses>
        <Address>
          <AddressType>STREET</AddressType>
        </Address>
        <Address>
          <AddressType>POBOX</AddressType>
          <AddressLine1>P O Box 5678</AddressLine1>
          <City>Melbourne</City>
          <PostalCode>3133</PostalCode>
        </Address>
      </Addresses>
      <Phones>
        <Phone>
          <PhoneType>DDI</PhoneType>
        </Phone>
        <Phone>
          <PhoneType>DEFAULT</PhoneType>
          <PhoneNumber>12344321</PhoneNumber>
          <PhoneAreaCode>03</PhoneAreaCode>
        </Phone>
        <Phone>
          <PhoneType>FAX</PhoneType>
        </Phone>
        <Phone>
          <PhoneType>MOBILE</PhoneType>
        </Phone>
      </Phones>
      <UpdatedDateUTC>2013-05-31T06:04:20.78</UpdatedDateUTC>
      <ContactGroups>
        <ContactGroup>
          <ContactGroupID>26fcca8d-a03b-4968-a80a-a463d5bf30ee</ContactGroupID>
          <Name>Support Clients (monthly)</Name>
          <Status>ACTIVE</Status>
        </ContactGroup>
      </ContactGroups>
      <IsSupplier>false</IsSupplier>
      <IsCustomer>true</IsCustomer>
    </Contact>
  </Contacts>
</Response>
""")

        credentials = Mock()
        xero = Xero(credentials)

        contact = xero.contacts.get(id='755f1475-d255-43a8-bedc-5ea7fd26c71f')

        self.assertEqual(contact['FirstName'], 'John')
        self.assertEqual(contact['LastName'], 'Sürname')
